{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SWIFTSimIO primer\n",
    "Theory Lunch 07-02-22"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `SWIFTSimIO` package is available at: https://github.com/SWIFTSIM/swiftsimio\n",
    "\n",
    "SWIFTSimIO uses the unyt package (similar to `astropy.units`) for symbolic units. In most cases a derived class `cosmo_array` is used to store whether quantity is comoving, etc. alongside the units."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unyt as u\n",
    "from os import path"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## SWIFTDataset\n",
    "\n",
    "The central piece of the SwiftSimIO interface is the `SWIFTDataset`, representing a snapshot file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from swiftsimio.reader import SWIFTDataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "snapnum = 23\n",
    "base_dir = '/home/koman/106e3_104b2_norm_0p3_new_cooling_L006N188/'\n",
    "snapshot_filename = path.join(base_dir, 'colibre_{:04d}.hdf5'.format(snapnum))\n",
    "\n",
    "SD = SWIFTDataset(snapshot_filename)  # Works fine for snapshots split into multiple files."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Metadata contains a wealth of information on simulation and code configuration, contents of snapshot, ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on SWIFTMetadata in module swiftsimio.reader object:\n",
      "\n",
      "class SWIFTMetadata(builtins.object)\n",
      " |  SWIFTMetadata(filename, units: swiftsimio.reader.SWIFTUnits)\n",
      " |  \n",
      " |  Loads all metadata (apart from Units, those are handled by SWIFTUnits)\n",
      " |  into dictionaries.\n",
      " |  \n",
      " |  This also does some extra parsing on some well-used metadata.\n",
      " |  \n",
      " |  Methods defined here:\n",
      " |  \n",
      " |  __init__(self, filename, units: swiftsimio.reader.SWIFTUnits)\n",
      " |      Constructor for SWIFTMetadata object\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      \n",
      " |      filename : str\n",
      " |          name of file to read from\n",
      " |      \n",
      " |      units : SWIFTUnits\n",
      " |          the units being used\n",
      " |  \n",
      " |  extract_cosmology(self)\n",
      " |      Creates an astropy.cosmology object from the internal cosmology system.\n",
      " |      \n",
      " |      This will be saved as ``self.cosmology``.\n",
      " |  \n",
      " |  get_mapping_metadata(self)\n",
      " |      Gets the mappings based on the named columns (must have already been read),\n",
      " |      from the form:\n",
      " |      \n",
      " |      SubgridScheme/{X}To{Y}Mapping.\n",
      " |      \n",
      " |      Includes a hack of `Dust` -> `Grains` that will be deprecated.\n",
      " |  \n",
      " |  get_metadata(self)\n",
      " |      Loads the metadata as specified in metadata.metadata_fields.\n",
      " |  \n",
      " |  get_named_column_metadata(self)\n",
      " |      Loads the custom named column metadata (if it exists) from\n",
      " |      SubgridScheme/NamedColumns.\n",
      " |  \n",
      " |  load_particle_types(self)\n",
      " |      Loads the particle types and metadata into objects:\n",
      " |      \n",
      " |          metadata.<type>_properties\n",
      " |      \n",
      " |      This contains six arrays,\n",
      " |      \n",
      " |          metadata.<type>_properties.field_names\n",
      " |          metadata.<type>_properties.field_paths\n",
      " |          metadata.<type>_properties.field_units\n",
      " |          metadata.<type>_properties.field_cosmologies\n",
      " |          metadata.<type>_properties.field_descriptions\n",
      " |          metadata.<type>_properties.field_compressions\n",
      " |      \n",
      " |      As well as some more information about the particle type.\n",
      " |  \n",
      " |  postprocess_header(self)\n",
      " |      Some minor postprocessing on the header to local variables.\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data descriptors defined here:\n",
      " |  \n",
      " |  __dict__\n",
      " |      dictionary for instance variables (if defined)\n",
      " |  \n",
      " |  __weakref__\n",
      " |      list of weak references to the object (if defined)\n",
      " |  \n",
      " |  code_info\n",
      " |      Gets a nicely printed set of code information with:\n",
      " |      \n",
      " |      Name (Git Branch)\n",
      " |      Git Revision\n",
      " |      Git Date\n",
      " |  \n",
      " |  compiler_info\n",
      " |      Gets information about the compiler and formats it as:\n",
      " |      \n",
      " |      Compiler Name (Compiler Version)\n",
      " |      MPI library\n",
      " |  \n",
      " |  diffusion_info\n",
      " |      Gets information about the diffusion scheme and formats it as:\n",
      " |      \n",
      " |      $\u0007lpha_{D, 0}$ = Diffusion alpha, eta_D$ = Diffusion beta\n",
      " |      Diffusion alpha (min) < $\u0007lpha_D$ < Diffusion alpha (max)\n",
      " |  \n",
      " |  hydro_info\n",
      " |      Gets information about the hydro scheme and formats it as:\n",
      " |      \n",
      " |      Scheme\n",
      " |      Kernel function in DimensionD\n",
      " |      $\\eta$ = Kernel eta (Kernel target N_ngb $N_{ngb}$)\n",
      " |      $C_{\\rm CFL}$ = CFL parameter\n",
      " |  \n",
      " |  library_info\n",
      " |      Gets information about the libraries used and formats it as:\n",
      " |      \n",
      " |      FFTW vFFTW library version\n",
      " |      GSL vGSL library version\n",
      " |      HDF5 vHDF5 library version\n",
      " |  \n",
      " |  present_particle_names\n",
      " |      The particle _names_ that are present in the simulation.\n",
      " |  \n",
      " |  present_particle_types\n",
      " |      The particle types that are present in the file.\n",
      " |  \n",
      " |  viscosity_info\n",
      " |      Gets information about the viscosity scheme and formats it as:\n",
      " |      \n",
      " |      Viscosity Model\n",
      " |      $\\alpha_{V, 0}$ = Alpha viscosity, $\\ell_V$ = Viscosity decay length [internal units], $\\beta_V$ = Beta viscosity\n",
      " |      Alpha viscosity (min) < $\\alpha_V$ < Alpha viscosity (max)\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data and other attributes defined here:\n",
      " |  \n",
      " |  __annotations__ = {'filename': <class 'str'>, 'header': <class 'dict'>...\n",
      "\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(help(SD.metadata))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's inspect a couple of entries, and save the boxsize for later use. Notice that the boxsize has units specified with `unyt`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SPHENIX (Borrow+ 2020)\n",
      "Quartic spline (M5) in 3D\n",
      "$\\eta$ = 1.23 (64.90 $N_{ngb}$)\n",
      "$C_{\\rm CFL}$ = 0.20\n",
      "[6.25 6.25 6.25] Mpc\n"
     ]
    }
   ],
   "source": [
    "print(SD.metadata.hydro_info)\n",
    "print(SD.metadata.boxsize)\n",
    "boxsize = SD.metadata.boxsize"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The usual particle types for a periodic cosmological hydro box are present:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['gas', 'dark_matter', 'stars', 'black_holes']"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "SD.metadata.present_particle_names"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can list the `properties` available for gas particles and their descriptions from the metadata:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "atomic_hydrogen_masses \n",
      " Atomic hydrogen masses containted in the particles. This quantity is obtained from the cooling tables and, if the particle is on the entropy floor, by extrapolating to the equilibrium curve assuming constant pressure. \n",
      "------------\n",
      "cold_dense_diffuse_metal_masses \n",
      " Diffuse metal mass where particles outside the cold, gas selection are zeroed \n",
      "------------\n",
      "cold_dense_gas_masses \n",
      " Gas masses where particles outside the cold, gas selection are zeroed \n",
      "------------\n",
      "coordinates \n",
      " Co-moving positions of the particles \n",
      "------------\n",
      "densities \n",
      " Co-moving mass densities of the particles \n",
      "------------\n",
      "densities_at_last_agnevent \n",
      " Physical density (not subgrid) of the gas at the last AGN feedback event that hit the particles. -1 if the particles have never been heated. \n",
      "------------\n",
      "densities_at_last_supernova_event \n",
      " Physical density (not subgrid) of the gas at the last SNII thermal feedback event that hit the particles. -1 if the particles have never been heated. \n",
      "------------\n",
      "diffuse_carbon_masses_from_model \n",
      " Mass in diffuse (i.e. non-dust dwelling) Carbon contained in the particles, according to dust model. \n",
      "------------\n",
      "diffuse_carbon_masses_from_table \n",
      " Mass in diffuse (i.e. non-dust dwelling) Carbon contained in the particles, according to cooling table depletion. \n",
      "------------\n",
      "diffuse_iron_masses_from_model \n",
      " Mass in diffuse (i.e. non-dust dwelling) Iron contained in the particles, according to dust model. \n",
      "------------\n",
      "diffuse_iron_masses_from_table \n",
      " Mass in diffuse (i.e. non-dust dwelling) Iron contained in the particles, according to cooling table depletion. \n",
      "------------\n",
      "diffuse_magnesium_masses_from_model \n",
      " Mass in diffuse (i.e. non-dust dwelling) Magnesium contained in the particles, according to dust model. \n",
      "------------\n",
      "diffuse_magnesium_masses_from_table \n",
      " Mass in diffuse (i.e. non-dust dwelling) Magnesium contained in the particles, according to cooling table depletion. \n",
      "------------\n",
      "diffuse_oxygen_masses_from_model \n",
      " Mass in diffuse (i.e. non-dust dwelling) Oxygen contained in the particles, according to dust model. \n",
      "------------\n",
      "diffuse_oxygen_masses_from_table \n",
      " Mass in diffuse (i.e. non-dust dwelling) Oxygen contained in the particles, according to cooling table depletion. \n",
      "------------\n",
      "diffuse_silicon_masses_from_model \n",
      " Mass in diffuse (i.e. non-dust dwelling) Silicon contained in the particles, according to dust model. \n",
      "------------\n",
      "diffuse_silicon_masses_from_table \n",
      " Mass in diffuse (i.e. non-dust dwelling) Silicon contained in the particles, according to cooling table depletion. \n",
      "------------\n",
      "diffusion_parameters \n",
      " Diffusion coefficient (alpha_diff) of the particles \n",
      "------------\n",
      "dust_mass_fractions \n",
      " Fractions of the particles' masses that are in a given species of dust grain \n",
      "------------\n",
      "dust_masses_from_table \n",
      " Mass in dust contained in the particles, according to cooling table depletion. \n",
      "------------\n",
      "element_mass_fractions \n",
      " Fractions of the particles' masses that are in the given element \n",
      "------------\n",
      "element_mass_fractions_in_gas \n",
      " Fractions of the particles' masses that are in the given element, not including the dust contribution. \n",
      "------------\n",
      "energies_received_from_agnfeedback \n",
      " Total amount of thermal energy from AGN feedback events received by the particles. \n",
      "------------\n",
      "entropies \n",
      " Co-moving entropies per unit mass of the particles \n",
      "------------\n",
      "fofgroup_ids \n",
      " Friends-Of-Friends ID of the group the particles belong to \n",
      "------------\n",
      "graphite_masses \n",
      " Graphite Masses (dust) contained in the particles \n",
      "------------\n",
      "hiiregions_end_time \n",
      " Time until particle is in HII region \n",
      "------------\n",
      "hiiregions_star_ids \n",
      " ID of star particle responsible for this HII region \n",
      "------------\n",
      "helium_masses \n",
      " Helium Masses contained in the particles \n",
      "------------\n",
      "hydrogen_masses \n",
      " Hydrogen Masses contained in the particles \n",
      "------------\n",
      "internal_energies \n",
      " Co-moving thermal energies per unit mass of the particles \n",
      "------------\n",
      "ionised_hydrogen_masses \n",
      " Ionised Hydrogen Masses contained in the particles \n",
      "------------\n",
      "iron_mass_fractions_from_snia \n",
      " Fractions of the particles' masses that are in iron produced by SNIa stars (incorporating both depleted and nebular phases) \n",
      "------------\n",
      "laplacian_internal_energies \n",
      " Laplacian (del squared) of the Internal Energy per unit mass of the particles \n",
      "------------\n",
      "last_agnfeedback_scale_factors \n",
      " Scale-factors at which the particles were last hit by AGN feedback. -1 if a particle has never been hit by feedback \n",
      "------------\n",
      "last_kinetic_early_feedback_scale_factors \n",
      " Scale-factors at which the particles were last hit by kinetic early feedback. -1 if a particle has never been hit by feedback \n",
      "------------\n",
      "last_sniikinetic_feedback_scale_factors \n",
      " Scale-factors at which the particles were last hit by SNII kinetic feedback. -1 if a particle has never been hit by feedback \n",
      "------------\n",
      "last_sniikinetic_feedbackvkick \n",
      " Physical kick velocity the particles were kicked with at last SNII kinetic feedback event. -1 if a particle has never been hit by feedback \n",
      "------------\n",
      "last_sniithermal_feedback_scale_factors \n",
      " Scale-factors at which the particles were last hit by SNII thermal feedback. -1 if a particle has never been hit by feedback \n",
      "------------\n",
      "last_snia_thermal_feedback_scale_factors \n",
      " Scale-factors at which the particles were last hit by SNIa thermal feedback. -1 if a particle has never been hit by feedback \n",
      "------------\n",
      "log_oxygen_over_hydrogen_masses_hi_floor \n",
      " Masses multplied by diffuse Oxygen/Hydrogen log abundance fraction, with floor value [O/H] = -3, zeroed for non cold, dense gas. \n",
      "------------\n",
      "log_oxygen_over_hydrogen_masses_lo_floor \n",
      " Masses multplied by diffuse Oxygen/Hydrogen log abundance fraction, with floor value [O/H] = -4, zeroed for non cold, dense gas. \n",
      "------------\n",
      "masses \n",
      " Masses of the particles \n",
      "------------\n",
      "masses_from_agb \n",
      " Masses of gas that have been produced by AGN stars \n",
      "------------\n",
      "masses_from_cejsn \n",
      " Mass of europium that have been produced by common-envelop jets SN events \n",
      "------------\n",
      "masses_from_collapsar \n",
      " Mass of europium that have been produced by collapsar events \n",
      "------------\n",
      "masses_from_nsm \n",
      " Mass of europium that have been produced by neutron star merger events \n",
      "------------\n",
      "masses_from_snii \n",
      " Masses of gas that have been produced by SNII stars \n",
      "------------\n",
      "masses_from_snia \n",
      " Masses of gas that have been produced by SNIa stars \n",
      "------------\n",
      "maximal_sniikinetic_feedbackvkick \n",
      " Maximal physical kick velocity the particles were kicked with in SNII kinetic feedback. -1 if a particle has never been hit by feedback \n",
      "------------\n",
      "maximal_temperature_scale_factors \n",
      " Scale-factors at which the maximal temperature was reached \n",
      "------------\n",
      "maximal_temperatures \n",
      " Maximal temperatures ever reached by the particles \n",
      "------------\n",
      "mean_iron_weighted_redshifts \n",
      " Mean redshift of SNIa events weighted by the iron mass imparted by each event. -1 if a particle has never been enriched by SNIa. \n",
      "------------\n",
      "mean_metal_weighted_redshifts \n",
      " Mean redshift of enrichment events weighted by the metal mass imparted by each event. -1 if a particle has never been enriched. \n",
      "------------\n",
      "metal_diffusion_coefficients \n",
      " Metal diffusion coefficients of the particles.Controls the metal diffusion rate, not to be confused with the energy diffusion coefficient. Stored in physical co-ordinates \n",
      "------------\n",
      "metal_diffusion_rates \n",
      " Metal diffusion rates for each element in physical co-ordinates \n",
      "------------\n",
      "metal_mass_fractions \n",
      " Fractions of the particles' masses that are in metals (incorporating both depleted and nebular phases) \n",
      "------------\n",
      "metal_mass_fractions_from_agb \n",
      " Fractions of the particles' masses that are in metals produced by AGB stars (incorporating both depleted and nebular phases) \n",
      "------------\n",
      "metal_mass_fractions_from_snii \n",
      " Fractions of the particles' masses that are in metals produced by SNII stars (incorporating both depleted and nebular phases) \n",
      "------------\n",
      "metal_mass_fractions_from_snia \n",
      " Fractions of the particles' masses that are in metals produced by SNIa stars (incorporating both depleted and nebular phases) \n",
      "------------\n",
      "molecular_hydrogen_masses \n",
      " Molecular hydrogen masses containted in the particles. This quantity is obtained from the cooling tables and, if the particle is on the entropy floor, by extrapolating to the equilibrium curve assuming constant pressure. \n",
      "------------\n",
      "oxygen_over_hydrogen_masses \n",
      " Masses multplied by diffuse Oxygen/Hydrogen (linear) abundance fraction, zeroed for non cold, dense gas. \n",
      "------------\n",
      "particle_ids \n",
      " Unique IDs of the particles \n",
      "------------\n",
      "pressures \n",
      " Co-moving pressures of the particles \n",
      "------------\n",
      "progenitor_particle_ids \n",
      " ID of the progenitor of this particle. If this particle is the result of one (or many) splitting events, this ID corresponds to the ID of the particle in the initial conditions that its lineage can be traced back to. If the particle was never split, this is the same as ParticleIDs. \n",
      "------------\n",
      "silicates_masses \n",
      " Silicate Masses (dust) contained in the particles \n",
      "------------\n",
      "smoothing_lengths \n",
      " Co-moving smoothing lengths (FWHM of the kernel) of the particles \n",
      "------------\n",
      "species_fractions \n",
      " Fractions of neutral, ionized and molecular hydrogen: [nHI/nH, nHII/nH, nH2/nH], assuming equilibrium tables. If the particles are within deltaT of the entropy floor the fractions are calculated using the subgrid quantities, i.e. assuming a pressure equilibrium on the entropy floor. If the particles are above deltaT of the entropy floor, the normal hydro quantities are used. \n",
      "------------\n",
      "split_counts \n",
      " Number of times this particle has been split. Note that both particles that take part in the splitting have counter incremented, so the number of splitting events in an entire simulation is half of the sum of all of these numbers. \n",
      "------------\n",
      "split_trees \n",
      " Binary tree describing splitting events. Particles that keep the original ID have a value of zero in a splitting event, whereasparticles given a new ID have a value of one. \n",
      "------------\n",
      "star_formation_rates \n",
      " If positive, star formation rates of the particles. If negative, stores the last time/scale-factor at which the gas particle was star-forming. If zero, the particle was never star-forming. \n",
      "------------\n",
      "stellar_wind_momenta_received \n",
      " Momentum received from stellar winds in physical coordinates \n",
      "------------\n",
      "subgrid_physical_densities \n",
      " The subgrid physical density if the particles are within deltaT of the entropy floor the subgrid density is calculated assuming a pressure equilibrium on the entropy floor, if the particles are above deltaT of the entropy floor the subgrid density is identical to the physical SPH density. \n",
      "------------\n",
      "subgrid_temperatures \n",
      " The subgrid temperatures if the particles are within deltaT of the entropy floor the subgrid temperature is calculated assuming a pressure equilibrium on the entropy floor, if the particles are above deltaT of the entropy floor the subgrid temperature is identical to the SPH temperature. \n",
      "------------\n",
      "temperatures \n",
      " Temperatures of the gas particles \n",
      "------------\n",
      "time_bins \n",
      " Time-bins of the particles \n",
      "------------\n",
      "total_oxygen_over_hydrogen_masses \n",
      " Masses multplied by total (i.e. dust-inclusive) Oxygen/Hydrogen (linear) abundance fraction, zeroed for non cold, dense gas. \n",
      "------------\n",
      "velocities \n",
      " Peculiar velocities of the stars. This is (a * dx/dt) where x is the co-moving positions of the particles \n",
      "------------\n",
      "velocity_dispersions \n",
      " Physical velocity dispersions (3D) squared, this is the velocity dispersion of the total velocity (peculiar velocity + Hubble flow, a H x + a (dx/dt) ). Values of the Velocity dispersion that have the value of FLT_MAX are particles that do not have neighbours and therefore the velocity dispersion of these particles cannot be calculated \n",
      "------------\n",
      "velocity_divergence_time_differentials \n",
      " Time differential (over the previous step) of the velocity divergence field around the particles. Again, provided without cosmology as this includes a Hubble flow term. To get back to a peculiar velocity divergence time differential, x_pec = a^4 (x - a^{-2} n_D dH / dt) \n",
      "------------\n",
      "velocity_divergences \n",
      " Local velocity divergence field around the particles. Provided without cosmology, as this includes the Hubble flow. To return to a peculiar velocity divergence, div . v_pec = a^2 (div . v - n_D H) \n",
      "------------\n",
      "viscosity_parameters \n",
      " Visosity coefficient (alpha_visc) of the particles, multiplied by the balsara switch \n",
      "------------\n"
     ]
    }
   ],
   "source": [
    "for name, desc in zip(SD.metadata.gas_properties.field_names, SD.metadata.gas_properties.field_descriptions):\n",
    "        print(name, '\\n', desc, '\\n------------')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `SWIFTDataset` uses a \"lazy-loading\" approach. So far no particle arrays have been loaded, but we also don't need to load them explicitly - they're simply read from disk at first use:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.16098554 0.01664983 0.12197359]\n",
      " [0.01400104 0.05345625 0.17775067]\n",
      " [0.08225423 0.14768666 0.16685584]\n",
      " ...\n",
      " [6.07958223 6.09383357 6.21733188]\n",
      " [6.10960895 6.15101505 6.15021308]\n",
      " [6.10177972 6.23066568 6.22951251]] Mpc (Comoving)\n"
     ]
    }
   ],
   "source": [
    "print(SD.gas.coordinates)  # using SD.gas.coordinates again later will be faster, only read from disk once"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Particle arrays also come with units attached. If needed, we can get the units, and the bare array in a particular unit, like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mpc\n",
      "[[0.16098554 0.01664983 0.12197359]\n",
      " [0.01400104 0.05345625 0.17775067]\n",
      " [0.08225423 0.14768666 0.16685584]\n",
      " ...\n",
      " [6.07958223 6.09383357 6.21733188]\n",
      " [6.10960895 6.15101505 6.15021308]\n",
      " [6.10177972 6.23066568 6.22951251]]\n"
     ]
    }
   ],
   "source": [
    "print(SD.gas.coordinates.units)\n",
    "print(SD.gas.coordinates.to_value(u.Mpc))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's take a quick look at what we've read in: plot a histogram of gas particle positions in `x` & `y`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "nperr = np.seterr(all='ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "hist, xbins, ybins = np.histogram2d(\n",
    "    SD.gas.coordinates[:, 0],\n",
    "    SD.gas.coordinates[:, 1],\n",
    "    bins=(\n",
    "        np.linspace(0, boxsize[0], 200),\n",
    "        np.linspace(0, boxsize[1], 200)\n",
    "    )\n",
    ")\n",
    "fig = plt.figure(1)\n",
    "sp = fig.add_subplot(1, 1, 1)\n",
    "sp.imshow(\n",
    "    np.log10(hist.T),\n",
    "    origin='lower',\n",
    "    extent=(0, boxsize[0], 0, boxsize[1])\n",
    ")\n",
    "sp.set_xlabel('x [{:s}]'.format(str(SD.gas.coordinates.units)))\n",
    "sp.set_ylabel('y [{:s}]'.format(str(SD.gas.coordinates.units)))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Selecting (sub)halos\n",
    "\n",
    "The default halo finder in SWIFT is *not* SUBFIND, but Velociraptor. There is a package providing some tools at: https://github.com/SWIFTSIM/velociraptor-python. This package is pretty rough around the edges and may change in the future."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "from velociraptor import load as load_catalogue\n",
    "from velociraptor.particles import load_groups\n",
    "from velociraptor.swift.swift import to_swiftsimio_dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pick a halo at random (#3 - this is the position in the array, not a FOF ID). Load both a list of groups and their properties, and information about which particles belong to which group:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "target_halo_index = 3\n",
    "velociraptor_filebase = path.join(base_dir, 'halo_{:04d}'.format(snapnum))\n",
    "halo_catalogue = load_catalogue('{:s}.properties'.format(velociraptor_filebase))\n",
    "groups = load_groups('{:s}.catalog_groups'.format(velociraptor_filebase), catalogue=halo_catalogue)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Get a \"mask\" specifying where in the particle array the particles belongning to our chosen group are. Separate masks are generated for the gravitationally bound and unbound particles. The particles are intelligently indexed so that the boundaries of a region enclosing them can be read without actually reading the coordinate arrays."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "particles, unbound_particles = groups.extract_halo(halo_id=target_halo_index)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can use `to_swiftsimio_dataset` so that only a small region will be loaded - this is *much* faster than reading the entire snapshot and selecting a region of interest afterwards! Notice that the resulting object is a `SWIFTDataset`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SWIFT dataset at /home/koman/106e3_104b2_norm_0p3_new_cooling_L006N188/colibre_0023.hdf5.\n"
     ]
    }
   ],
   "source": [
    "SD, bound_mask = to_swiftsimio_dataset(particles, snapshot_filename, generate_extra_mask=True)\n",
    "print(SD)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can (lazily) load the gas coordinates for this `SWIFTDataset` and re-make a similar visualisation to before. This time only a subset of the box is read in. The selection of gravitationally bound particles has not yet been applied."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(1)\n",
    "hist, xbins, ybins = np.histogram2d(\n",
    "    SD.gas.coordinates[:, 0],\n",
    "    SD.gas.coordinates[:, 1],\n",
    "    bins=(\n",
    "        np.linspace(0, boxsize[0], 200),\n",
    "        np.linspace(0, boxsize[1], 200)\n",
    "    )\n",
    ")\n",
    "sp1 = fig.add_subplot(2, 2, 1)\n",
    "sp1.imshow(\n",
    "    np.log10(hist.T),\n",
    "    origin='lower',\n",
    "    extent=(0, boxsize[0], 0, boxsize[1])\n",
    ")\n",
    "sp1.set_xlabel('x [{:s}]'.format(str(SD.gas.coordinates.units)))\n",
    "sp1.set_ylabel('y [{:s}]'.format(str(SD.gas.coordinates.units)))\n",
    "hist, xbins, ybins = np.histogram2d(\n",
    "    SD.gas.coordinates[:, 1],\n",
    "    SD.gas.coordinates[:, 2],\n",
    "    bins=(\n",
    "        np.linspace(0, boxsize[1], 200),\n",
    "        np.linspace(0, boxsize[2], 200)\n",
    "    )\n",
    ")\n",
    "sp2 = fig.add_subplot(2, 2, 2)\n",
    "sp2.imshow(\n",
    "    np.log10(hist.T),\n",
    "    origin='lower',\n",
    "    extent=(0, boxsize[1], 0, boxsize[2])\n",
    ")\n",
    "sp1.set_xlabel('y [{:s}]'.format(str(SD.gas.coordinates.units)))\n",
    "sp1.set_ylabel('z [{:s}]'.format(str(SD.gas.coordinates.units)))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The mask allows us to select only the gravitationally bound particles."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "cosmo_array([[5.7584856 , 3.11983931, 3.77567353],\n",
       "             [5.75910851, 3.12410757, 3.78021704],\n",
       "             [5.76010915, 3.12063059, 3.78501992],\n",
       "             ...,\n",
       "             [5.90772246, 3.36409004, 3.9115557 ],\n",
       "             [5.89042843, 3.380795  , 3.91772705],\n",
       "             [5.90390773, 3.3848351 , 3.90824232]], 'Mpc')"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "SD.gas.coordinates[bound_mask.gas]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot only the bound particles. Now this actually looks like a galaxy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(1)\n",
    "hist, xbins, ybins = np.histogram2d(\n",
    "    SD.gas.coordinates[bound_mask.gas, 0],\n",
    "    SD.gas.coordinates[bound_mask.gas, 1],\n",
    "    bins=200\n",
    ")\n",
    "sp1 = fig.add_subplot(1, 1, 1)\n",
    "sp1.imshow(\n",
    "    np.log10(hist.T),\n",
    "    origin='lower',\n",
    "    extent=(xbins[0], xbins[-1], ybins[0], ybins[-1])\n",
    ")\n",
    "sp1.set_xlabel('x [{:s}]'.format(str(SD.gas.coordinates.units)))\n",
    "sp1.set_ylabel('y [{:s}]'.format(str(SD.gas.coordinates.units)))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## SWIFTGalaxy\n",
    "\n",
    "The above demos of `velociraptor` + `SWIFTSimIO` have a lot of steps. It would be nice to simply specify a snapshot file and a halo ID and get directly a \"galaxy\" object that we can work with. This is the purpose of `SWIFTGalaxy`, currently a prototype package. https://github.com/kyleaoman/swiftgalaxy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "from swiftgalaxy import SWIFTGalaxy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we need to specify the halo catalogue file and the halo ID of interest in addition to the snapshot file. Some other options are also available."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "SG = SWIFTGalaxy(\n",
    "    snapshot_filename,\n",
    "    velociraptor_filebase,\n",
    "    target_halo_index,\n",
    "    extra_mask='bound_only',  # default is None, but let's select bound particles\n",
    "    auto_recentre=True,  # the default\n",
    "    centre_type='minpot'  # the default\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The galaxy is automatically centred on the potential minimum (including wrapping the box as needed). Coordinate transformations are implemented so that all particles keep a consistent reference frame, even if loaded later. This also works for translations, velocity \"boosts\", and sequences of coordinate transformations. For example, to rotate the galaxy around the `z`-axis:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "SG.rotate(angle_axis=(180 * u.deg, 'z'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Some additional coordinate systems are provided for convenience, again evaluated lazily:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "unyt_array([[ 0.02364763,  0.02302472,  0.02202408, ..., -0.12558923,\n",
       "             -0.1082952 , -0.12177451],\n",
       "            [ 0.13688264,  0.13261438,  0.13609136, ..., -0.10736809,\n",
       "             -0.12407305, -0.12811315],\n",
       "            [-0.01746863, -0.01292512, -0.00812225, ...,  0.11841354,\n",
       "              0.12458489,  0.11510016]], 'Mpc')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "SG.gas.spherical_coordinates.r\n",
    "SG.gas.spherical_coordinates.lon\n",
    "SG.gas.spherical_coordinates.lat\n",
    "SG.gas.cylindrical_coordinates.R  # or .rho\n",
    "SG.gas.cylindrical_coordinates.phi  # or .lon\n",
    "SG.gas.cylindrical_coordinates.z\n",
    "SG.gas.cartesian_coordinates.x\n",
    "SG.gas.cartesian_coordinates.y\n",
    "SG.gas.cartesian_coordinates.z\n",
    "SG.gas.cartesian_coordinates.xyz"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's plot the particle distribution again. Notice two differences: the image is rotated 180 degrees (due to the call to `rotate` above), and is centred at `(0, 0)` instead of being in box coordinates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(1)\n",
    "hist, xbins, ybins = np.histogram2d(\n",
    "    SG.gas.coordinates[:, 0],\n",
    "    SG.gas.coordinates[:, 1],\n",
    "    bins=200\n",
    ")\n",
    "sp1 = fig.add_subplot(1, 1, 1)\n",
    "sp1.imshow(\n",
    "    np.log10(hist.T),\n",
    "    origin='lower',\n",
    "    extent=(xbins[0], xbins[-1], ybins[0], ybins[-1])\n",
    ")\n",
    "sp1.set_xlabel('x [{:s}]'.format(str(SG.gas.coordinates.units)))\n",
    "sp1.set_ylabel('y [{:s}]'.format(str(SG.gas.coordinates.units)))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These features simplify the analysis of simulated galaxies. For example, producing a circular velocity curve is reduced to a few lines of code (please excuse some hideous unit manipulation revealing my limited experience with `unyt` - I ran into some overflow issues that I don't quite understand and just hacked together a work-around until it went away... I'm sure there's a better way though!):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "ptypes = ['gas', 'dark_matter', 'stars']\n",
    "r_all = np.concatenate([SG.__getattribute__(t).spherical_coordinates.r.to_value(u.kpc) for t in ptypes]) * u.kpc\n",
    "M_all = np.concatenate([SG.__getattribute__(t).masses.to_value(u.Msun) for t in ptypes]) * u.Msun\n",
    "rsort = np.argsort(r_all)\n",
    "r_all = r_all[rsort]\n",
    "M_all = M_all[rsort]\n",
    "vc_all = np.sqrt(u.physical_constants.G * np.cumsum(M_all.to_value(u.Msun)) * u.Msun / r_all).to(u.km / u.s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, '$v_{circ}$ [km/s]')"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sample_r = np.linspace(.1, 30, 200) * u.kpc\n",
    "fig = plt.figure(1)\n",
    "sp = fig.add_subplot(1, 1, 1)\n",
    "sp.plot(sample_r, np.interp(sample_r, r_all, vc_all), '-r')\n",
    "sp.set_xlabel(r'$r$ '+'[{:s}]'.format(str(sample_r.units)))\n",
    "sp.set_ylabel(r'$v_{circ}$ '+'[{:s}]'.format(str(vc_all.units)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
